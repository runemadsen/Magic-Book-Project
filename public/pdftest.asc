Chapter 2.  Forces
------------------

[quote]
“Don't underestimate the Force.”
  —Darth Vader

In the final example of Chapter 1, we saw how we could calculate a dynamic acceleration based on a vector pointing from a circle on the screen to the mouse location.   The resulting motion resembled a magnetic attraction between circle and mouse, as if some _force_ were pulling the circle in towards the mouse.  In this chapter we will formalize our understanding of the concept of a *_force_* and its relationship to *_acceleration_*.    Our goal, by the end of this chapter, is to understand how to make multiple objects move around the screen and respond to a variety of environmental forces.

== 2.1 Forces and Newton’s Laws of Motion

[source,java]
----
 void applyForce(PVector force) {
  // Newton’s second law but with force accumulation. 
  // We now add each force to acceleration, one at a time.
    acceleration.add(force);    
 }             
----

Now, we’re not finished just yet.  There is one more piece to force accumulation.  Since we’re adding all the forces together at any given moment, we have to make sure that we clear acceleration (i.e. set it to zero) before each time [function]*update()* is called.   Let’s think about wind for a moment.   Sometimes the wind is very strong, sometimes it’s weak, and sometimes there’s no wind at all.   At any given moment, there might be a huge gust of wind, say, when the user holds down the mouse.

[source,java]
----
if (mousePressed) {
  PVector wind = new PVector(0.5,0);
  mover.applyForce(wind);
}
----

When the user releases the mouse, the wind will stop and according to Newton’s first law, the object will continue to move at a constant velocity.   However, if we had forgotten to reset acceleration to zero, the gust of wind would still be in effect.  Even worse, it would add onto itself from the previous frame, since we are accumulating forces!    Acceleration, in our simulation, has no memory; it is simply calculated based on the environmental forces present at a moment in time.   This is different than, say, location, which must remember where the object was the previous frame in order to move properly to the next.   

The easiest way to implement clearing the acceleration for each frame is to multiply the [klass]*PVector* by zero at the end of [function]*update()*.

[source,java]
----
 void update() {
    velocity.add(acceleration);
    location.add(velocity);
    acceleration.mult(0);
 }
----