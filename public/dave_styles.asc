Chapter 2.  Forces
------------------

=== Another bulleted list of steps

*_Step 1. Make sure you have two Bodies ready to go._* + 
*_Step 2. Define the Joint._* + 
*_Step 3. Configure the Joint’s properties (What are the Bodies? Where are the anchors? What is its rest length? Is it elastic or rigid?)_* + 
*_Step 4. Create the Joint._* + 

=== Another bulleted list of steps

*_Step 1: Predict the future._*  Compute the vehicle’s theoretical location N frames in the future.  This is yet another example of how our vehicles have an intelligent ability to perceive their environment.  Instead of knowing only its current location, a vehicle can extrapolate its future location according to its velocity.

*_Step 2: How far away from the path are we?_*  Calculate the distance between the vehicle’s future location and the path.  If it is within the path, do nothing. Otherwise, continue.

*_Step 3: Find a target point on the path._*   Take the point on the path that is “normal” (more on this in a moment) to the vehicle’s future location.   Then look ahead on the path and set a target location. 

*_Step 4: Steer._*  Set the vehicle’s steering force to seek that target.

=== Longer quote from a paper in middle of text

Let’s see how Reynolds defines the desired velocity for his wandering behavior.

_“Wandering is a type of random steering which has some long term order: the steering direction on one frame is related to the steering direction on the next frame. This produces more interesting motion than, for example, simply generating a random steering direction each frame.”_  —http://www.red3d.com/cwr/steer/Wander.html[Craig Reynolds]

=== Longer quote in middle of text, quote is a bulleted list

. There should be no initial pattern for which there is a simple proof that the population can grow without limit.
. There should be initial patterns that apparently do grow without limit.
. There should be simple initial patterns that grow and change for a considerable period of time before coming to an end in three possible ways: fading away completely (from overcrowding or becoming too sparse), settling into a stable configuration that remains unchanged thereafter, or entering an oscillating phase in which they repeat an endless cycle of two or more periods. + 
—Martin Gardner, http://www.ibiblio.org/lifepatterns/october1970.html[Scientific American 223 (October 1970)]: 120-123.


=== Exercise with a figure

[[chapter06_figure37]]
image::imgs/chapter06/ch06_37.png[alt="Figure 6.37",classname="half-width-right"]

[[chapter06_exercise15]]
.Exercise 6.15
==============================
Can you write the above code so that boids can only see other boids that are actually within their “peripheral” vision (as if they had eyes)?  This is depicted in Figure 6.37.
==============================

=== Another list

. *_Death._*  If a cell is alive (state = 1) it will die (state becomes 0) under the following circumstances.
  - *_Overpopulation:_* If the cell has four or more alive neighbors, it dies.
  - *_Loneliness:_* If the cell has one or fewer alive neighbors, it dies.
. *_Birth._*  If a cell is dead (state = 0) it will come to life (state becomes 1) if it has exactly three alive neighbors (no more, no less).
. *_Stasis._* In all other cases, the cell state does not change.  To be thorough, let’s describe those scenarios.
  - *_Staying Alive:_* If a cell is alive and has exactly 2 or 3 live neighbors, it stays alive.
  - *_Staying Dead:_* If a cell is dead and has anything other than 3 live neighbors, it stays dead.

=== Table that will need little rectangle images

[options="header"]
|=======================
|Genotype |Phenotype 
|int c = 255;   | [notetoself]*[insert white square]* 
|int c = 127;   | [notetoself]*[insert gray square]* 
|int c = 0;     | [notetoself]*[insert black square]* 
|=======================

As we can see, the genotype is the digital information.  Each color is a variable that stores an integer and we choose to express that integer as a color.  But how we choose to express the data is arbitrary.   In a different approach, we could have used the integer to describe the length of a line, the weight of a force, etc.  

[options="header"]
|=======================
|Same Genotype  |Different Phenotype (line length)

|int c = 255; | [notetoself]*[insert 255 pixel line]*
|int c = 127; | [notetoself]*[insert 127 pixel line]*
|int c = 0;   | [notetoself]*[insert 0 pixel line]*
|=======================

=== Another bulleted list

. Create a population of Rockets
. Let the Rockets live for N frames
. Evolve the next generation
  - Selection
  - Reproduction
. Return to step #2