Chapter 2.  Forces
------------------

=== Additional

*_Step 1. Make sure you have two Bodies ready to go._* + 
*_Step 2. Define the Joint._* + 
*_Step 3. Configure the Joint’s properties (What are the Bodies? Where are the anchors? What is its rest length? Is it elastic or rigid?)_* + 
*_Step 4. Create the Joint._* + 

Let’s see how Reynolds defines the desired velocity for his wandering behavior.

_“Wandering is a type of random steering which has some long term order: the steering direction on one frame is related to the steering direction on the next frame. This produces more interesting motion than, for example, simply generating a random steering direction each frame.”_  —http://www.red3d.com/cwr/steer/Wander.html[Craig Reynolds]


*_Step 1: Predict the future._*  Compute the vehicle’s theoretical location N frames in the future.  This is yet another example of how our vehicles have an intelligent ability to perceive their environment.  Instead of knowing only its current location, a vehicle can extrapolate its future location according to its velocity.

*_Step 2: How far away from the path are we?_*  Calculate the distance between the vehicle’s future location and the path.  If it is within the path, do nothing. Otherwise, continue.

*_Step 3: Find a target point on the path._*   Take the point on the path that is “normal” (more on this in a moment) to the vehicle’s future location.   Then look ahead on the path and set a target location. 

*_Step 4: Steer._*  Set the vehicle’s steering force to seek that target.


[[chapter06_figure37]]
image::imgs/chapter06/ch06_37.png[alt="Figure 6.37",classname="half-width-right"]

[[chapter06_exercise15]]
.Exercise 6.15
==============================
Can you write the above code so that boids can only see other boids that are actually within their “peripheral” vision (as if they had eyes)?  This is depicted in Figure 6.37.
==============================

. There should be no initial pattern for which there is a simple proof that the population can grow without limit.
. There should be initial patterns that apparently do grow without limit.
. There should be simple initial patterns that grow and change for a considerable period of time before coming to an end in three possible ways: fading away completely (from overcrowding or becoming too sparse), settling into a stable configuration that remains unchanged thereafter, or entering an oscillating phase in which they repeat an endless cycle of two or more periods. + 
—Martin Gardner, http://www.ibiblio.org/lifepatterns/october1970.html[Scientific American 223 (October 1970)]: 120-123.


. *_Death._*  If a cell is alive (state = 1) it will die (state becomes 0) under the following circumstances.
  - *_Overpopulation:_* If the cell has four or more alive neighbors, it dies.
  - *_Loneliness:_* If the cell has one or fewer alive neighbors, it dies.
. *_Birth._*  If a cell is dead (state = 0) it will come to life (state becomes 1) if it has exactly three alive neighbors (no more, no less).
. *_Stasis._* In all other cases, the cell state does not change.  To be thorough, let’s describe those scenarios.
  - *_Staying Alive:_* If a cell is alive and has exactly 2 or 3 live neighbors, it stays alive.
  - *_Staying Dead:_* If a cell is dead and has anything other than 3 live neighbors, it stays dead.


“Don't underestimate the Force.”
  —Darth Vader

In the final example of Chapter 1, we saw how we could calculate a dynamic acceleration based on a vector pointing from a circle on the screen to the mouse location.   The resulting motion resembled a magnetic attraction between circle and mouse, as if some _force_ were pulling the circle in towards the mouse.  In this chapter we will formalize our understanding of the concept of a *_force_* and its relationship to *_acceleration_*.    Our goal, by the end of this chapter, is to understand how to make multiple objects move around the screen and respond to a variety of environmental forces.

=== Section Heading

In the text, there are words that can be styled uniformly, i.e. every time a [var]*variable* appears like [var]*x* or [var]*velocity*.  Also, sometimes I refer to functions like [function]*setup()* and [function]*draw()* as well as classes, like [klass]*PVector* or [klass]*Particle*.  And sometimes I just include some code inline, like, this is how you say would update the velocity: [mono]*velocity.add(acceleration);*.

==== Subsection heading 1

some text blah blah some text blah blah some text blah blah some text blah blah some text blah blah some text blah blah some text blah blah some text blah blah some text blah blah some text blah blah some text blah blah some text blah blah some text blah blah some text blah blah some text blah blah some text blah blah some text blah blah some text blah blah

==== Subsection heading 2

some text blah blah some text blah blah some text blah blah some text blah blah some text blah blah some text blah blah some text blah blah some text blah blah some text blah blah some text blah blah some text blah blah some text blah blah some text blah blah some text blah blah some text blah blah some text blah blah some text blah blah some text blah blah

=== Some Highlighted Text

Newton’s first law is commonly stated as:

[NOTE]
=====================================================================
_An object at rest stays at rest and an object in motion stays in motion._
=====================================================================

However, this is missing an important element related to forces and so we could expand it by stating:

[NOTE]
=====================================================================
_An object at rest stays at rest and an object in motion stays in motion at a constant speed and direction unless acted upon by an unbalanced force._
=====================================================================

[NOTE]
=====================================================================
Acceleration::     _xacceleration and yacceleration_
Target location::  _xtarget and ytarget_
Wind::             _xwind and ywind_
Friction::         _xfriction and yfriction_
=====================================================================

=== 2.1 Examples of Tables

.A table with code in it.
|=======================
|1. A function that receives both an [klass]*Attractor* and a [klass]*Mover*:  |attraction(a,m);
|2. A function in the [klass]*Attractor* class that receives a [klass]*Mover*:   |a.attract(m);
|3. A function in the [klass]*Mover* class that receives an [klass]*Attractor*:  |m.attractedTo(a);
|4. A function in the [klass]*Attractor* class that receives a [klass]*Mover* and returns a [klass]*PVector*, which is the attraction force.  That attraction force is then passed into the [klass]*Mover*’s [function]*applyForce()* function:  |PVector f = a.attract(m);
m.applyForce(f);
|=======================

.A tiny table with two columns of numbers
[options="header"]
|=======================
|Time	|Noise Value
|0	    |0.365
|1	    |0.363
|2	    |0.363
|3	    |0.364
|4	    |0.366
|=======================

=== Illustrations

There are illustrations. Some are float right, some float left, some are full-width.  They have captions, sometimes just the figure number.

We can entertain ourselves by discussing the theoretical principles behind autonomous agents and steering as much as we like, but we can’t get anywhere without first understanding the concept of a steering force. Consider the following scenario.  A “Vehicle” moving with velocity desires to seek a target.   

[[chapter06_figure1]]
image::imgs/chapter06/ch6_01.png[classname="half-width-right",alt="Figure 6.1"]

Its goal and subsequent action is to seek the target in Figure 6.1.  If you think back to Chapter 2, you might begin by making the target an “attractor” and apply a gravitational force that pulls the vehicle to the target.  This would be a perfectly reasonable solution, but conceptually it’s not what we’re looking for here.   We don’t want to simply calculate a force that pushes the Vehicle towards its target; rather, we are asking the Vehicle to make an intelligent decision to steer towards the target based on its perception of its state and environment (i.e. how fast and in what direction is it currently moving).   The vehicle should look at how it desires to move (a vector pointing to the target), compare that goal with how quickly it is currently moving (its velocity), and apply a force accordingly.

In the above formula, velocity is no problem.  After all, we’ve got a variable for that.   However, we don’t have the desired velocity; this is something we have to calculate.  Let’s take a look at Figure 6.2.   If we’ve defined the vehicle’s goal as “seeking the target,” then its desired velocity is a vector that points from its current location to the target location.  

[[chapter06_figure2]]
image::imgs/chapter06/ch6_02.png[alt="Figure 6.2"]

Assuming a PVector target, we then have:

=== 2.1 Exercises

.Exercise 3.1
==================
Rotate a baton-like object (see below) around its center using [function]*translate()* and [function]*rotate()*.

image::imgs/chapter03/chapter03_exc01.png[canvas="processingjs/chapter03/Ex_3_01_exercise_baton/Ex_3_01_exercise_baton.pde"]
==================

.Exercise 2.8
==================
In the example above, we have a system (i.e. array) of Mover objects and one Attractor object.  Build an example that has both systems of Movers and Attractors.  What if you make the Attractors invisible?  Can you create a pattern / design from the trails of objects moving around attractors?  (See the Metropop Denim project by Clayton Cubitt and Tom Carden: http://processing.org/exhibition/works/metropop/) for an example.) 
==================

=== 2.3 Examples

image::imgs/chapter02/ch2_ex08.png[canvas="processingjs/chapter02/_2_8_mutual_attraction/_2_8_mutual_attraction.pde processingjs/chapter02/_2_8_mutual_attraction/Mover.pde",classname="screenshot"]

[[chapter02_example8]]
[example]*Example 2.8: Mutual Attraction*

[source,java]
----
Mover[] movers = new Mover[20];

float g = 0.4;

void setup() {
  size(400,400);
  for (int i = 0; i < movers.length; i++) {
    movers[i] = new Mover(random(0.1,2),random(width),random(height)); 
  }
}

void draw() {
  background(255);

  for (int i = 0; i < movers.length; i++) {
    for (int j = 0; j < movers.length; j++) {
      // Don’t attract yourself!
      if (i != j) {           
        PVector force = movers[j].attract(movers[i]);
        movers[i].applyForce(force);
      }
    }
    movers[i].update();
    movers[i].display();
  }
}
----

=== 2.4 Breakout boxes

Acceleration is directly proportional to force and inversely proportional to mass.  This means that if you get pushed, the harder you are pushed, the faster you’ll move (accelerate).  The bigger you are, the slower you’ll move.

[NOTE]
.Weight vs. Mass
=====================================================================
- The *mass* of an object is a measure of the amount of matter in the object (measured in kilograms).
- *Weight*, though often mistaken for mass, is technically the force of gravity on an object. From Newton’s second law, we can calculate it as mass times the acceleration of gravity ([var]*w* = [var]*m* * [var]*g*). Weight is measured in newtons.
- *Density* is is defined as the amount of mass per unit of volume (grams per cubic centimeter, for example).

Note that an object that has a mass of one kilogram on earth would have a mass of one kilogram on the moon. However, it would weigh only one-sixth as much.
=====================================================================

Now, in the world of Processing, what is mass anyway?  Aren’t we dealing with pixels?  To start in a simpler place, let’s say that in our pretend pixel world, all of our objects have a mass equal to 1.  [var]*F*/ 1 = [var]*F*.  And so:

=== 2.2 Examples of Lists

Following is an exmaple of a bulleted list where the items are all one line width. To me it seems like these should be tightly packed vertically?

[classname="packed"]
- _chance of moving up: 	20%_
- _chance of moving down: 	20%_
- _chance of moving left: 	20%_
- _chance of moving right: 	40%_

Here's a numbered list where the elements are one line paragraphs.

. Pick a random number: R1
. Compute a probability P that R1 should qualify.  Let’s try: P = R1.
. Pick another random number: R2
. If R2 is less than P, then we have found our number—R1!
. If R2 is not less than P, go back to step 1 and start over.

Here's a numbered list with paragraph elements.  These can have line breaks between them?

- *An autonomous agent has a _limited_ ability to perceive environment.*   It makes sense that a living, breathing being should have an awareness of its environment.  What does this mean for us, however?   As we look at examples in this chapter, we will point out programming techniques for allowing objects to store references to other objects and therefore “perceive” their environment.    It’s also crucial that we consider the word *_limited_* here.  Are we designing an all-knowing rectangle that flies around a Processing window, aware of everything else in that window?  Or are we creating a shape that can only examine any other object within fifteen pixels of itself?   Of course, there is no right answer to this question; it all depends.  We’ll explore some possibilities as we move forward.  For a simulation to feel more “natural,” however, limitations are a good thing.  An insect, for example, may only be aware of the sights and smells that immediately surround it.   For a real-world creature, we could study the exact science of these limitations.   Luckily for us, we can just make stuff up and try it out.

- *An autonomous agent processes the information from its environment and calculates an action.*    This will be the easy part for us, as the action is a force.  The environment might tell the agent that there’s a big scary-looking shark swimming right at it, and the action will be a powerful force in the opposite direction.  

- *An autonomous agent has no leader.*  This third principle is something we care a little less about.  After all, if you are designing a system where it makes sense to have a leader barking commands at various entities, then that’s what you’ll want to implement.  Nevertheless, many of these examples will have no leader for an important reason.   As we get to the end of this chapter and examine group behaviors, we will look at designing collections of autonomous agents that exhibit the properties of complex systems— intelligent and structured group dynamics that emerge not from a leader, but from the local interactions of the elements themselves.

And here is a weirder list-like thing in the genetic algorithms chapter.

[underline]*SETUP*

Step 1: *_Initialize_*: Create a population of N elements, each with randomly generated DNA.
 
[underline]*LOOP*

Step 2: *_Selection_*: Evaluate the fitness of each element of the population and build a mating pool.

Step 3: *_Reproduction_*: Repeat N times: + 
a. Pick two parents with probability according to relative fitness. + 
b. Crossover — create a “child” by combining the DNA of these two parents. + 
c. Mutation — mutate the child’s DNA based on a given probability. + 
d. Add the new child to a new population.

Step 4. Replace the old population with the new population and return to Step 2.

And a list with some nested bullets.

- Understanding the concept behind a force
- Deconstructing the force’s formula into two parts:
  * How do we compute the force’s direction?
  * How do we compute the force’s magnitude?
- Translating that formula into Processing code that calculates a [klass]*PVector* to be sent through our Mover’s [function]*applyForce()* function.

=== 2.3 End of Chapter Project

[TIP]
.The Ecosystem Project:
==================
Step 2 Exercise:

Incorporate the concept of forces into your ecosystem.   Try introducing other elements into the environment (food, a predator) that the creature interacts with.   Does the creature experience attraction or repulsion to things in its world?  Can you think more abstractly and design forces based on the creature’s desires or goals?
==================

=== Math Notation

In other words:

{wuplusv}

translates to:

{wxuxplusvx} + 
{wyuyplusvy}

and therefore:

{wx53} + 
{wy24}

and therefore:

{w86}
